#######################################################################################################################################

# Sample config to be used in conjunction with Blobifier Purge Tray, Bucket & Nozzle Scrubber mod. Created by Dendrowen (dendrowen on 
# Discord). The Macro is based on a version, and Nozzle Scrubber is made by Hernsl (hernsl#8860 on Discord). The device is 
# designed around a Voron V2.4 300mm, but should work for 250mm and 350mm too. This version only supports the assembly on the rear-left 
# of the bed. If you decide to change that, please consider contributing to the project by creating a pull request with the needed 
# changes.

# IMPORTANT: The rear-left part of your bed becomes unusable by this mod because the toolhead needs to lower down to 0. Be sure 
#            not to use the left-rear 130x35mm.

# This file includes the conditional homing and QGL from Ellis. You can remove them if you have them defined elsewhere.

# The goals of this combination of devices is to dispose of purged filament during a multicolored print without the need of a purge 
# block and without the flurries of filament poops consuming your entire 3D printer room. The Blobifier achieves that by purging onto
# a retractable tray which causes the filament to turn into a tiny blob rather then a large spiral. This keeps the waste relativly 
# small. The bucket should be able to account for up to 200 filament swaps (for the 300mm V2).

# Upload this file to your klipper config directory and include it in printer.cfg
# [include blobifier.cfg]

# Edit this macro according to your needs, but be careful and make sure you understand the macro before making changes.

# The macro can be cut up into the following portions:
# - Move the toolhead to the assembly (at the rear-left of the bed)
# - Check if the purge length (PURGE_LEN=) parameter is provided and greater then 0mm. If not, skip to the last step.
# - Purge filament in sections of a predetermined length, and repeat that x times for a single blob. 
# - Eject the filament into the bucket. Go back to the previous step if not all is purged yet.
# - Clean the nozzle on the brush.

# Default parameters are set for my own printer. CAREFULLY GO OVER EVERY SETTING AND ADJUST THEM IF NECESSARY. 

############################################## SAMPLE 'Change filament G-CODE' ########################################################
# 
# For now I only have one for Orca Slicer. If you use a different slicer, detirmine what is needed for yours.
# 
# ; ======================== ORCASLICER ==========================================
# G1 Z{layer_z + 2} E-{retraction_length[0]} F2000     ; Move up a bit and retract some filament
# ; ====== READ BEFORE USING ======
# ; G1 X20 Y282 F30000                                 ; Move to the tray. Change these to fit your printer. Ommitting this will cause the printhead to dwell on your print during a swap
# ; G1 X10                                             ; A second move to hover over the tray. You can do this in one go, but some have filametrix installed and it could interfere
# ; G1 Z0.2                                            ; Move down to the tray
# ; ===============================
# T{next_extruder}                                     ; Swap extruder
# M104 S{new_filament_temp}                            ; Set new temperature, but do not wait for it.
# 
# ; Blobifier command. This makes sure to purge 20cm ahead of a print, and the correct flushing volumes during a print. Ths '40 + ' part is just the filament left in 
# ; the hotend after a filametrix cut. If you do not use a cutter, remove the '40 + '
# BLOBIFIER FINAL_RETRACT={retraction_length[0]} PURGE_LEN={40 + (first_flush_volume + second_flush_volume < 1 ? 160 : first_flush_volume + second_flush_volume)}
# 
# G1 Z{layer_z + 2} F30000                             ; Move back to the top of the print and then some.
# G1 E{retraction_length[0]}                           ; unretract
# ; ============================== END ============================================

######################################################## DISCLAIMER ###################################################################

# You, and you alone, are responsible for the correct execution of these macros and gcodes. Any damage that may occur to your machine 
# remains your responsibility. Especially when executing this macro for the first few times, keep an eye on your printer and the 
# emergency stop.

#######################################################################################################################################

# Servo configuration
[servo blobifier]
# Pin for the servo.
pin: PG14
# Adjust this value until a 'BLOBIFIER_SERVO POS=in' retracts the tray fully without a buzzing sound
minimum_pulse_width: 0.00053
# Adjust this value until a 'BLOBIFIER_SERVO POS=out' extends the tray fully without a buzzing sound
maximum_pulse_width: 0.0023
# Leave this value at 180
maximum_servo_angle: 180

[gcode_button bucket]
pin: ^PG15 # The pullup ( ^ ) is important here, because we didn't install a 3.3v wire to the switch
press_gcode:
  M117 bucket installed
  _BLOBIFIER_COUNT_RESET
release_gcode:
  M117 bucket removed
    
[gcode_macro BLOBIFIER]
# These parameters define your filament purging. The retract variable is used to retract right after purging to prevent unnecessary
# oozing. Some filament are particularly oozy and may continue to ooze out of the nozzle for a second or two after retracting. Update 
# as necessary.
variable_purge_spd:           300	         ; Speed, in mm/min, of the purge.
variable_purge_temp_min:      200	         ; Minimum nozzle temperature to permit a purge. Otherwise, purge will not occur.
variable_purge_ret:             1          ; Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary or provide in argument.

# Adjust this so that your nozzle scrubs within the brush. Be careful not to go too low! Start out with a high value (like, 8) and go 
# down from there.
variable_brush_top:             2.5 

# These parameters define your scrubbing, travel speeds, safe z clearance and how many times you want to wipe. Update as necessary.
variable_clearance_z:           2	         ; When traveling, but not cleaning, the clearance along the z-axis between nozzle and brush.
variable_wipe_qty:              2	         ; Number of complete (A complete wipe: left, right, left OR right, left, right) wipes.
variable_travel_spd_xy:     10000	         ; Travel (not cleaning) speed along x and y-axis in mm/min.
variable_travel_spd_z:       2000	         ; Travel (not cleaning) speed along z axis in mm/min.
variable_wipe_spd_xy:        5000	         ; Nozzle wipe speed in mm/min.


# These parameters define the size of the brush. Update as necessary. A visual reference is provided below.
# 
#                  ←   brush_width   →                            
#                   _________________                                                          
#                  |                 |  ↑                                           Y position is acquired
#  brush_start (x) |                 | brush_depth            from your stepper_y position_max. Adjust your brush physically in
#                  |_________________|  ↓                               Y so that the nozzle scrubs within the brush.       
#                          (y)                                                                 
#                      brush_front
# __________________________________________________________
#                     PRINTER FRONT
# 
# 
# Start location of the brush. Defaults for 250, 300 and 350mm are provided below. Uncomment as necessary
#variable_brush_start:          34	# For 250mm build    
variable_brush_start:          67 # For 300mm build
#variable_brush_start:          84 # for 350mm build

# width of the brush
variable_brush_width:          35	

# Location of where to purge. The tray is 15mm in length, so if you assemble it against the side of the bed (default), 10mm is a good location
variable_purge_x: 10

# Height of the tray. If it's below your bed, give this a negative number equal to the difference. If it's above your bed, give it a positive number 
# You can find this number by homing, doing a QGL, and moving you toolhead above the tray, and lowering it with the paper method. 
variable_tray_top: 0.4

# The following section defines how the purging sequence is executed. This is where you tune the purging to create pretty blobs. Refer to the 
# visual reference for a better understanding. The visual is populated with default values. Below are some guides provided to help with tuning.
#
#                          \_____________/
#                             |___|___|
#                                \_/            ______________  < End of third iteration.
#                                / \                                  HEIGHT:   3 x iteration_z_raise - (2 + 1) x iteration_z_change  (3 x 5 - 2 x 1.2 = 11.4)
#                               |   |                                 EXTRUDED: 3 x max_iteration_length                        (3 x 50 = 150)
#                              /     \          ______________  < End of second iteration.
#                             |       \                               HEIGHT:   2 x iteration_z_raise - 1 x iteration_z_change  (2 x 5 - 1 x 1.2 = 8.8)
#                            /         |                              EXTRUDED: 2 x max_iteration_length                        (2 x 50 = 100)
#                           |           \       ______________  < End of first iteration. 
#                          /             \                            HEIGHT:   1 x iteration_z_raise                           (1 x 5 = 5)
#                         |               |                           EXTRUDED: 1 x max_iteration_length                        (1 x 50 = 50)
#___________               \             /      ______________  < Start height of the nozzle. default value: 1.5mm
#           |_______________\___________/_      ______________  < Bottom of the tray
#           |_____________________________|
#           |
# 
########################### BLOB TUNING ##############################
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Incr. purge start          |
# |    initial purge (first few mm)     |                            |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under     | Incr. temperature          |
# |  the nozzle at the first iteration  | Decr. iteration_z_raise    |
# |                                     | Incr. max_iteration_length |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under the | Decr. purge_spd            |
# |  the nozzle at later iterations     | Incr. iteration_z_change   |
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Decr. iteration_z_change   |
# |         later iterations            |                            |
# +-------------------------------------+----------------------------+
# |        I think my blobs can         | Balsy... Increase          |
# |          be much bigger!            | max_iterations_per_blob    |
# +-------------------------------------+----------------------------+
#

# The height to raise the nozzle above the tray before purging. This allows any built up pressure to escape before the purge.
variable_purge_start: 1

# The maximum mm of filament (length) to extrude one iteration. A blob contains multiple iterations
variable_max_iteration_length: 50

# The amount to raise Z for each iteration
variable_iteration_z_raise: 5

# As the nozzle gets higher and the blob wider, the Z raise needs to be reduced.
variable_iteration_z_change: 1.2

# Maximum iterations per blob. 3 Should be sufficient for most flushes. If not, Blobifier will create multiple blobs for a single purge.
variable_max_iterations_per_blob: 3

# Lift the nozzle slightly after creating the blob te release pressure on the tray.
variable_eject_hop: 4

# Set the part cooling fan speed. Disabling can help prevent the nozzle from cooling down and stimulate flow, Enabling it can prevent 
# blobs from sticking together. Values range from 0 .. 1, or -1 if you don't want it changed.
# Leave it unchanged
#variable_part_cooling_fan: -1 
# Disable the fan
#variable_part_cooling_fan: 0
# Run it at full speed
variable_part_cooling_fan: 1

# ================================= BUCKET ====================================
# Maximum number of blobs that fit in the bucket. Pauses the print if it exceeds this number.
variable_max_blobs: 400
# Enable the bucket shaker. You need to have the shaker.stl installed
variable_enable_shaker: 1
# The number of back-and-forth motions of one shake
variable_bucket_shakes: 10
# During shaking acceleration can often be higher because you don't neeed to keep print quality in mind
# Higher acceleration helps better with dispersing the blobs
variable_shake_accel: 5000

# The frequency at which to shake the bucket. A decimal value ranging from 0 to 1, where 0 is never, and 1 is every time.
# This way the shaking occurs more often as the bucket fills up. Sensible values range from 0.75 to 0.95
variable_bucket_shake_frequency: 0.9
gcode:
  # home if not already homed
  _CG28
  # retrieve purge length from params
  {% set purge_len = params.PURGE_LEN|default(0)|float %}
  # Get the blobifier count values
  {% set bl_count = printer['gcode_macro _BLOBIFIER_COUNT'] %}
  # retrieve the reatract amount from the params
  {% set purge_ret = params.RETRACT_AMOUNT|default(purge_ret)|float %}
  # Save the gcode state in this macro instance.
  SAVE_GCODE_STATE NAME=clean_nozzle

  {% if part_cooling_fan >= 0 %}
  # Save the part cooling fan speed to be enabled again later
    {% set backup_fan_speed = printer.fan.speed %}
    # Set part cooling fan speed
    M106 S{part_cooling_fan * 255}
  {% endif %}

  {% set backup_feedrate = printer.gcode_move.speed_factor %}
  M220 S100

  # Set to absolute positioning.
  G90
  
  ## Grab max position of Y-axis from config to use in setting a fixed y position for location_bucket_rear = True.
  {% set position_y = printer.configfile.config["stepper_y"]["position_max"]|float %}

  # Check for purge length and purge if necessary.
  {% if purge_len > 0 %}

    # QGL if not already done
    _CQGL

    # Move to the assembly, first a bit more to the right (brush_start) to avoid a potential filametrix pin if it's 
    # not already on the same Y coordinate
    {% if printer.toolhead.position.y != position_y %}
      G1 X{brush_start} Y{position_y} F{travel_spd_xy}
    {% endif %}
    # Move over to the tray
    G1 X{purge_x}

    # Maybe shake the bucket
    {% if enable_shaker %}
      {% if (bl_count.current_blobs + 1) >= bl_count.next_shake %}
        BLOBIFIER_SHAKE_BUCKET SHAKES={bucket_shakes}
        _BLOBIFIER_CALCULATE_NEXT_SHAKE
      {% endif %}
    {% endif %}
    
    # Drop down to the tray
    G1 Z{tray_top + purge_start} F{travel_spd_z}

    # Extend the blobifier
    BLOBIFIER_SERVO POS=out

    # Heat the nozzle if necessary
    {% if printer.extruder.temperature < purge_temp_min %}
      {% if printer.extruder.target < purge_temp_min %}
        M109 S{purge_temp_min}
      {% else %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purge_temp_min}
      {% endif %}
    {% endif %}

    # Calculate total number of iterations based on the purge length and the max_iteration length
    {% set iterations = (purge_len / max_iteration_length)|round(0, 'ceil')|int %}

    # Repeat the process until purge_len is reached
    {% for n in range(iterations) %}
    
      # Calculate current iteration in current blob
      {% set step = n % max_iterations_per_blob %}

      {% if step == 0 %}
        G1 Z{tray_top + purge_start} F{travel_spd_z}
      {% endif %}

      # Determine the amount to extrude. Either the remaining purge_len or max_iteration_length
      {% set extrude_amount = [purge_len - (max_iteration_length * n),max_iteration_length]|min %}
      
      # relative positioning
      G91 
      M83

      # Calculate the amount z has to be raised
      # If step equals 0, the start position of the nozzle is already a little higher.
      {% if step == 0 %}
        {% set raise_z = (iteration_z_raise - purge_start) * ((extrude_amount|float) / max_iteration_length) %}
      {% else %}  
        {% set raise_z = (iteration_z_raise - (step * (step + 1) / 2) * iteration_z_change) * ((extrude_amount|float) / max_iteration_length) %}
      {% endif %}

      # make sure raise_z never goes negative, dropping the nozzle while purging.
      {% set raise_z = [raise_z,0]|max %}

      # Calculate the raise speed based on the purge speed.
      {% set duration = (extrude_amount|float) / (params.PURGE_SPD|default(purge_spd)|int) %} #how many minutes should the extrusion take (usualy 0.1 minutes / 6 seconds with default parameters)
      {% set speed = raise_z / duration %}
    
      # Purge one iteration
      G1 Z{raise_z} E{extrude_amount} F{speed}

      # If we're at the end of a blob (e.g. the last iteration), eject the blob to the bucket
      {% if step == (max_iterations_per_blob - 1) or (purge_len - (max_iteration_length * (n+1))) <= 0 %}
        # Raise z a bit to relieve pressure on the blob preventing it to go sideways
        G1 Z{eject_hop} F{travel_spd_z}
        # Retract the tray
        BLOBIFIER_SERVO POS=in
        # Move the toolhead down to purge_start height lowering the blob below the tray
        G90 # absolute positioning
        G1 Z{tray_top}
        # Extend the tray to 'cut off' the blob and prepare for the next blob
        BLOBIFIER_SERVO POS=out
        BLOBIFIER_SERVO POS=in
        BLOBIFIER_SERVO POS=out
        # Keep track of the # of blobs
        _BLOBIFIER_COUNT
      {% endif %}
    {% endfor %}
    G1 E-{purge_ret}
  {% endif %}
  
  # Position for wipe. Either left or right of brush based off bucket_pos to avoid unnecessary travel.
  G1 Z{brush_top + clearance_z} F{travel_spd_z}
  G1 X{brush_start} F{travel_spd_xy}
  G1 Y{position_y}

  # Move nozzle down into brush.
  G1 Z{brush_top} F{travel_spd_z}
   
  # Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
  {% for wipes in range(1, (wipe_qty + 1)) %}
     G1 X{brush_start + brush_width} F{wipe_spd_xy}
     G1 X{brush_start} F{wipe_spd_xy}
  {% endfor %}
   
  # Clear from area and retract.
  G1 Z{brush_top + clearance_z} F{travel_spd_z}

  # Restore the gcode state to how it was before the macro.
  RESTORE_GCODE_STATE NAME=clean_nozzle
  {% if part_cooling_fan >= 0 %}
    # Reset part cooling fan if it was changed
    M106 S{backup_fan_speed * 255}
  {% endif %}
M220 S{backup_feedrate * 100}


[gcode_macro BLOBIFIER_SERVO]
# increase this value if the servo doesn't have enough time to fully retract or extend
variable_dwell_time: 300
gcode:
  {% set pos = params.POS %}
  {% if pos == "in" %}
    SET_SERVO SERVO=blobifier ANGLE=180
    G4 P{dwell_time}
  {% elif pos == "out" %}
    SET_SERVO SERVO=blobifier ANGLE=0
    G4 P{dwell_time}
  {% else %}
    {action_respond_info("provide POS=[in|out]")}
  {% endif %}
  SET_SERVO SERVO=blobifier WIDTH=0

[gcode_macro _BLOBIFIER_COUNT]
# Don't change these variables
variable_current_blobs: 0
variable_last_shake: 0
variable_next_shake: 0
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}
  {% set count = printer['gcode_macro _BLOBIFIER_COUNT'] %}
  {% if current_blobs >= bl.max_blobs %}
    {action_respond_info("Empty purge bucket!")}
    M117 Empty purge bucket!
    PAUSE
  {% else %}
    SET_GCODE_VARIABLE MACRO=_BLOBIFIER_COUNT VARIABLE=current_blobs VALUE={current_blobs + 1}
    {action_respond_info("Blobs in bucket: %s/%s. Next shake @ %s" % (current_blobs + 1, bl.max_blobs, next_shake))}
  {% endif %}

[gcode_macro _BLOBIFIER_COUNT_RESET]
gcode:
  SET_GCODE_VARIABLE MACRO=_BLOBIFIER_COUNT VARIABLE=current_blobs VALUE=0
  SET_GCODE_VARIABLE MACRO=_BLOBIFIER_COUNT VARIABLE=last_shake VALUE=0
  _BLOBIFIER_CALCULATE_NEXT_SHAKE

[gcode_macro BLOBIFIER_SHAKE_BUCKET]
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}
  {% set count = printer['gcode_macro _BLOBIFIER_COUNT'] %}
  {% set original_accel = printer.toolhead.max_accel %}
  {% set original_accel_to_decel = printer.toolhead.max_accel_to_decel %}
  SET_GCODE_VARIABLE MACRO=_BLOBIFIER_COUNT VARIABLE=last_shake VALUE={count.current_blobs}
  SAVE_GCODE_STATE NAME=shake_bucket
  M400
  M117 (^_^)

  G90
  {% set shakes = params.SHAKES|default(10)|int %}
  {% set position_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  
  _CG28

  # move to save y if not already there
  {% if printer.toolhead.position.y != position_y %}
    G1 X{bl.brush_start} Y{position_y} F{bl.travel_spd_xy}
  {% endif %}

  # move up a bit to prevent oozing on base
  G1 Z2 F{bl.travel_spd_z}
  # slide into the slot
  G1 X0 F{bl.travel_spd_xy}

  M400
  M117 (+(+_+)+)

  SET_VELOCITY_LIMIT ACCEL={bl.shake_accel} ACCEL_TO_DECEL={bl.shake_accel/2}

  # Shake away!
  {% for shake in range(1, shakes) %}
     G1 Y{position_y - 4}
     G1 Y{position_y}
  {% endfor %}

  SET_VELOCITY_LIMIT ACCEL={original_accel} ACCEL_TO_DECEL={original_accel_to_decel}
  # move out of slot
  G1 X{bl.purge_x}

  M400
  M117 (X_x)

  RESTORE_GCODE_STATE NAME=shake_bucket

[gcode_macro _BLOBIFIER_CALCULATE_NEXT_SHAKE]
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}
  {% set count = printer['gcode_macro _BLOBIFIER_COUNT'] %}

  {% set remaining_blobs = bl.max_blobs - count.last_shake %}
  {% set next_shake = (1 - bl.bucket_shake_frequency) * remaining_blobs + count.last_shake %}
  _BLOBIFIER_SET_NEXT_SHAKE VALUE={next_shake|int}

[gcode_macro _BLOBIFIER_SET_NEXT_SHAKE]
gcode:
  {% if params.VALUE %}
    {% set next_shake = params.VALUE %}
    SET_GCODE_VARIABLE MACRO=_BLOBIFIER_COUNT VARIABLE=next_shake VALUE={next_shake}
  {% else %}
    {action_respond_info("Provide parameter VALUE=")}
  {% endif %}

[delayed_gcode BLOBIFIER_INIT]
initial_duration: 0.0
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}
{% set raise_z_min = (bl.iteration_z_raise - ((bl.max_iterations_per_blob - 1) * (bl.max_iterations_per_blob) / 2) * bl.iteration_z_change) %}
  
  {% if raise_z_min < 0 %} 
    {action_raise_error("BLOBIFIER: You current blob settings cause the nozzle to drop on the final iteration(s). increase iteration_z_raise or decrease either iteration_z_change or max_iterations_per_blob.")}
  {% endif %}
  
  {% if bl.bucket_shake_frequency > 1 or bl.bucket_shake_frequency < 0 %}       
    {action_raise_error("BLOBIFIER: variable_bucket_shake_frequency must be between 0 and 1 (incl.)")}         
  {% endif %}

  {% if bl.part_cooling_fan != -1 and (bl.part_cooling_fan < 0 or bl.part_cooling_fan > 1) %}
    {action_raise_error("BLOBIFIER: Value %f is invalid for variable part_cooling_fan. Either -1 or a value from 0 .. 1 is valid." % (bl.part_cooling_fan))}
  {% endif %}

  {% if bl.bucket_shake_frequency < 0 or bl.bucket_shake_frequency > 1 %}
     {action_raise_error("BLOBIFIER: Value %f is invalid for variable bucket_shake_frequency. Change it to a value between 0 .. 1" % (bl.bucket_shake_frequency))}
  {% endif %}  

  _BLOBIFIER_CALCULATE_NEXT_SHAKE
BLOBIFIER_SERVO POS=out

# Ellis' conditional homing and QGL macros
[gcode_macro _CG28]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

[gcode_macro _CQGL]
gcode:
  {% if printer.quad_gantry_level.applied == False %}
    _CG28
    QUAD_GANTRY_LEVEL
    G28 Z
  {% endif %}